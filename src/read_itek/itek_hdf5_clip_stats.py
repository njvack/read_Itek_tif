#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (c) 2017 Board of Regents of the University of Wisconsin System
# Written by Nathan Vack <njvack@wisc.edu>

"""Usage: itek_hdf5_clip_stats [options] <hdf5_file>...

Files are expected to be in the format generated by itf2hdf5. For each channel
in each listed file, generate an output file listing the filename, channel,
and how much of the channel was offscale in total, low, and high.

Options:
  -v --verbose             Show debugging output
  --channels=<channels>    A comma-separated list of channel names, or 'all'
                           Examples: 'channel_012,channel_013', 'zygo,corr'
                           [default: all]

"""

import sys
import csv
import logging

import h5py
import numpy as np

from read_itek import __version__ as VERSION
from read_itek.vendor.docopt import docopt
from read_itek import reader

logging.basicConfig(level=logging.DEBUG, format='%(message)s')
logger = logging.getLogger()
logger.setLevel(logging.INFO)


HEADER = [
    'filename',
    'channel',
    'percent_clip_total',
    'percent_clip_low',
    'percent_clip_high',
]


def main():
    args = docopt(__doc__, version="read_itek {}".format(VERSION))
    if args['--verbose']:
        logger.setLevel(logging.DEBUG)
    logger.debug(args)
    writer = csv.writer(sys.stdout, delimiter='\t')
    writer.writerow(HEADER)
    for filename in args['<hdf5_file>']:
        try:
            report_clip_stats(filename, writer, args['--channels'])
        except (IOError, KeyError) as e:
            writer.writerow([filename, 'error', e.message, ''])


def report_clip_stats(filename, writer, channel_names_str):
    f = h5py.File(filename, 'r')
    channel_group = f['/channels']
    keys = channel_keys(channel_names_str, channel_group)
    for channel_name in keys:
        dset = channel_group[channel_name]
        clip_high = (dset[:] >= reader.VAL_MAX)
        clip_low = (dset[:] <= reader.VAL_MIN)
        clip_total = np.logical_or(clip_high, clip_low)
        writer.writerow([
            filename,
            channel_name,
            '{:.2f}%'.format(np.mean(clip_total) * 100),
            '{:.2f}%'.format(np.mean(clip_low) * 100),
            '{:.2f}%'.format(np.mean(clip_high) * 100),
        ])


def channel_keys(channel_names_str, channels_group):
    if channel_names_str == 'all':
        return channels_group.keys()
    return [s.strip() for s in channel_names_str.split(',')]


if __name__ == '__main__':
    main()
