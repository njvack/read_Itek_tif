#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (c) 2017 Board of Regents of the University of Wisconsin System
# Written by Nathan Vack <njvack@wisc.edu>

"""Usage: itf_clip_stats [options] <hdf5_file>...

Files are expected to be in the format generated by itf2hdf5. For each channel
in each listed file, generate an output file listing the filename, channel,
and how much of the channel was offscale in total, low, and high.

Options:
  -v --verbose           Show debugging output
  --channels=<channels>  A comma-separated list of channel numbers, 'all',
                         or 'on'
                         [default: on]
  --card_map=<order>     Change the mapping of cards to channel blocks
                         (16 numbers separated by commas)
                         [default: 1,0,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
"""

import sys
import csv
import logging

import numpy as np

from read_itek import __version__ as VERSION
from read_itek.vendor.docopt import docopt
from read_itek import reader

logging.basicConfig(level=logging.DEBUG, format='%(message)s')
logger = logging.getLogger()
logger.setLevel(logging.INFO)


HEADER = [
    'filename',
    'channel',
    'percent_clip_total',
    'percent_clip_low',
    'percent_clip_high',
]


def main(argv=None):
    args = docopt(__doc__, version="read_itek {}".format(VERSION), argv=argv)
    if args['--verbose']:
        logger.setLevel(logging.DEBUG)
    logger.debug(args)
    writer = csv.writer(sys.stdout, delimiter='\t')
    writer.writerow(HEADER)
    channel_map = reader.channel_map(args['--card_map'])
    channels = args['channels']
    for filename in args['<hdf5_file>']:
        try:
            report_clip_stats(filename, writer, channels, channel_map)
        except (IOError, KeyError) as e:
            writer.writerow([filename, 'error', e.message, ''])


def report_clip_stats(filename, writer, channels_str, channel_map):
    itf_data, cards = reader.read_data(filename)
    keys = channel_ids(channels_str)
    for channel_number in keys:
        dset = itf_data['channels'][:, channel_number]
        clip_high = (dset[:] >= reader.VAL_MAX)
        clip_low = (dset[:] <= reader.VAL_MIN)
        clip_total = np.logical_or(clip_high, clip_low)
        writer.writerow([
            filename,
            channel_number,
            '{:.2f}%'.format(np.mean(clip_total) * 100),
            '{:.2f}%'.format(np.mean(clip_low) * 100),
            '{:.2f}%'.format(np.mean(clip_high) * 100),
        ])


def channel_ids(channels_str, cards, channel_map):
    channels_str = channels_str.strip().lower()
    if channels_str == 'all':
        return range(reader.CHANNELS)
    if channels_str == 'on':
        return reader.on_channels(cards, channel_map)
    return [int(s) for s in channels_str.split(',')]


if __name__ == '__main__':
    main()
